generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = "mysql://fall2024c56g11:phong365tro@10.96.210.203:3306/fall2024c56g11_shadow"
}

model Admin {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  password      String
  createBy      Admin?   @relation("CreatedAdmins", fields: [createById], references: [id]) // Self-relation
  createById    Int? // ID của admin tạo bản ghi này
  createdAdmins Admin[]  @relation("CreatedAdmins") // Danh sách các admin được tạo bởi admin này
  createAt      DateTime @default(now())
  updateAt      DateTime @updatedAt
}

model User {
  id               Int            @id @default(autoincrement())
  name             String
  email            String         @unique
  password         String
  avatar           String?
  phone            String?
  zalo             String?
  createAt         DateTime       @default(now())
  updateAt         DateTime       @updatedAt
  places           Place[]        @relation("UserPlaces") // Khi xóa User, xóa Place liên quan
  bookings         Booking[]      @relation("UserBookings") // Khi xóa User, xóa Booking liên quan
  reports          Report[]       @relation("UserReports") // Các báo cáo do người dùng gửi
  status           UserStatus     @default(ACTIVE) // Trạng thái người dùng
  violationCount   Int            @default(0) // Số lần vi phạm
  comments         Comment[]      @relation("UserComments")
  favourites       Favourite[]    @relation("UserFavs")
  notifications    Notification[] @relation("UserNotis")
  resetToken       String? // Token để đặt lại mật khẩu (nullable)
  resetTokenExpiry DateTime? // Thời gian hết hạn của token (nullable)
}

enum UserStatus {
  ACTIVE // Người dùng đang hoạt động
  BLACKLISTED // Người dùng bị đưa vào danh sách đen
  DEACTIVATED // Người dùng đã vô hiệu hóa tài khoản
}

model Report {
  id         Int          @id @default(autoincrement())
  reporter   User         @relation("UserReports", fields: [reporterId], references: [id], onDelete: Cascade) // Người gửi báo cáo
  reporterId Int
  place      Place        @relation("PlaceReports", fields: [placeId], references: [id], onDelete: Cascade) // Nhà bị báo cáo
  placeId    Int
  reason     String // Lý do báo cáo
  status     ReportStatus @default(PENDING) // Trạng thái xử lý báo cáo
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

enum ReportStatus {
  PENDING // Đang chờ xử lý
  DONE
}

model Place {
  id           Int            @id @default(autoincrement())
  owner        User           @relation("UserPlaces", fields: [ownerId], references: [id], onDelete: Cascade) // Khi xóa User, xóa Place
  ownerId      Int
  title        String
  address      String
  latitude     Decimal?
  longitude    Decimal?
  area         Int // diện tích
  photos       PlacePhoto[]   @relation("PlacePhotos") // Khi xóa Place, xóa Photo liên quan
  description  String
  perks        PlacePerk[]    @relation("PlacePerks") // Khi xóa Place, xóa Perk liên quan
  extraInfo    String
  duration     Int // thời hạn hợp đồng
  price        Float
  status       PlaceStatus    @default(SEE)
  bookings     Booking[]      @relation("PlaceBookings") // Khi xóa Place, xóa Booking liên quan
  reports      Report[]       @relation("PlaceReports")
  favourites   Favourite[]    @relation("PlaceFavs")
  notification Notification[] @relation("PlaceNotis")
  createAt     DateTime       @default(now())
  updateAt     DateTime       @updatedAt
}

enum PlaceStatus {
  SEE
  HIDDEN
  DELETE // xóa do report nhé
}

model PlacePhoto {
  id      Int    @id @default(autoincrement())
  url     String
  place   Place  @relation("PlacePhotos", fields: [placeId], references: [id], onDelete: Cascade) // Khi xóa Place, xóa Photo liên quan
  placeId Int
}

model PlacePerk {
  id      String @id @default(uuid())
  perk    String
  place   Place  @relation("PlacePerks", fields: [placeId], references: [id], onDelete: Cascade) // Khi xóa Place, xóa Perk liên quan
  placeId Int
}

model Booking {
  id         Int           @id @default(autoincrement())
  place      Place         @relation("PlaceBookings", fields: [placeId], references: [id], onDelete: Cascade) // Khi xóa Place, xóa Booking
  placeId    Int
  renter     User          @relation("UserBookings", fields: [renterId], references: [id], onDelete: Cascade) // Khi xóa User, xóa Booking
  renterId   Int
  checkOut   DateTime?
  status     BookingStatus @default(PENDING)
  isContinue Boolean       @default(false)
  invoices   Invoice[]     @relation("BookingInvoices") // Khi xóa Booking, xóa Invoice liên quan
  comments   Comment[]     @relation("BookingComments")
  createAt   DateTime      @default(now())
  updateAt   DateTime      @updatedAt
}

enum BookingStatus {
  PENDING
  APPROVED
  REJECTED
  WAIT
  RENTED
}

model Invoice {
  id          Int            @id @default(autoincrement())
  booking     Booking        @relation("BookingInvoices", fields: [bookingId], references: [id], onDelete: Cascade) // Khi xóa Booking, xóa Invoice
  bookingId   Int
  title       String
  description String?
  photos      InvoicePhoto[] @relation("InvoicePhotos") // Khi xóa Invoice, xóa Photo liên quan
  createdAt   DateTime       @default(now())
  updateAt    DateTime       @updatedAt
}

model InvoicePhoto {
  id        Int     @id @default(autoincrement())
  url       String
  invoice   Invoice @relation("InvoicePhotos", fields: [invoiceId], references: [id], onDelete: Cascade) // Khi xóa Invoice, xóa Photo liên quan
  invoiceId Int
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  bookingId Int      @unique // Ràng buộc chỉ cho phép 1 bình luận cho mỗi booking
  user      User     @relation("UserComments", fields: [userId], references: [id], onDelete: Cascade)
  booking   Booking  @relation("BookingComments", fields: [bookingId], references: [id], onDelete: Cascade)
}

model Favourite {
  id        Int      @id @default(autoincrement())
  userId    Int
  placeId   Int
  user      User     @relation("UserFavs", fields: [userId], references: [id], onDelete: Cascade)
  place     Place    @relation("PlaceFavs", fields: [placeId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, placeId]) // Đảm bảo mỗi user chỉ được yêu thích mỗi Place một lần
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int // Người nhận thông báo
  user      User     @relation("UserNotis", fields: [userId], references: [id], onDelete: Cascade)
  type      String // Loại thông báo (booking, report, invoice)
  message   String // Nội dung thông báo
  read      Boolean  @default(false) // Trạng thái đã đọc
  createdAt DateTime @default(now()) // Thời gian tạo thông báo
  updatedAt DateTime @updatedAt // Thời gian cập nhật
  placeId   Int? // ID của Place liên quan (nếu có)
  place     Place?   @relation("PlaceNotis", fields: [placeId], references: [id], onDelete: Cascade) // Quan hệ với Place

  // Tạo chỉ mục duy nhất cho mỗi người dùng và loại thông báo
  @@unique([userId, type, createdAt])
}
